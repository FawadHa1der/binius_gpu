// clang-format off
#include "md5.cuh"

#include <cstdint>
#include <cstdio>
#include <random>
#include <iostream>

#include <catch2/catch_test_macros.hpp>
#include <catch2/benchmark/catch_benchmark.hpp>

#include "ulvt/utils/common.cuh"
#include "ulvt/finite_fields/binary_tower.cuh"
#include "ulvt/finite_fields/baby_bear.cuh"
#include "ulvt/ntt/nttconf.cuh"
#include "ulvt/ntt/gpuntt.cuh"
#include "ulvt/ntt/additive_ntt.cuh"
// clang-format on

// These are hashes of the output data pulled from the python model and risc0's ntt code for the large input sizes
const uint8_t bb31_ntt_hashes[28][16] = {
	{0},
	{0x14, 0x21, 0x73, 0x1a, 0x0a, 0x5a, 0x5a, 0x5d, 0x6f, 0xbc, 0x7b, 0xcd, 0xe6, 0x02, 0x5d, 0xad},
	{0x69, 0x20, 0x68, 0xc8, 0x14, 0x79, 0xf8, 0x56, 0x18, 0xd4, 0x3a, 0xae, 0xd9, 0xa8, 0x27, 0x1c},
	{0x85, 0x3f, 0x14, 0x43, 0xdc, 0x87, 0x44, 0x62, 0xd5, 0x82, 0x58, 0xec, 0x87, 0xa4, 0x2f, 0x46},
	{0x7b, 0xe2, 0xe2, 0x36, 0x65, 0x3c, 0x45, 0x21, 0x93, 0x36, 0xd2, 0x4f, 0x83, 0x93, 0xd9, 0xd6},
	{0x39, 0xfe, 0xc2, 0x7f, 0x1e, 0x58, 0xf4, 0xb5, 0x2a, 0x30, 0xc2, 0xa7, 0x6f, 0x70, 0x57, 0x93},
	{0x38, 0xcf, 0x03, 0x8b, 0x60, 0x3c, 0xc5, 0x60, 0xd9, 0x4e, 0xa2, 0x54, 0xa9, 0x7a, 0x07, 0xd2},
	{0x17, 0xb9, 0xb3, 0x69, 0xfe, 0x06, 0x30, 0xe2, 0xec, 0x58, 0x57, 0x74, 0x91, 0xc4, 0x64, 0xea},
	{0x01, 0xad, 0x39, 0x26, 0x83, 0x7e, 0x99, 0x33, 0x53, 0x91, 0x34, 0xbb, 0x01, 0x52, 0xa8, 0x60},
	{0x85, 0x55, 0x15, 0xba, 0x83, 0xb0, 0xec, 0xa3, 0x87, 0x1a, 0x32, 0x4b, 0x12, 0x35, 0x0e, 0x48},
	{0x24, 0x6e, 0xbb, 0x7b, 0x85, 0x82, 0x76, 0x15, 0xbf, 0xab, 0xfb, 0x22, 0xa2, 0x9d, 0x56, 0x68},
	{0x36, 0x64, 0x83, 0x55, 0x57, 0x3b, 0x93, 0xfe, 0x08, 0xe0, 0x05, 0x81, 0x66, 0x2a, 0x5f, 0x68},
	{0x11, 0x54, 0xa1, 0x74, 0x99, 0x1d, 0x63, 0x1e, 0x03, 0x73, 0x67, 0x2a, 0x33, 0x41, 0x9d, 0xea},
	{0x86, 0xb2, 0x14, 0x7c, 0x56, 0xf6, 0xf6, 0x17, 0x1b, 0x5a, 0x2e, 0x45, 0xdb, 0x58, 0xfd, 0x73},
	{0x03, 0x99, 0x78, 0xef, 0x7d, 0xe6, 0xb9, 0xb7, 0xcb, 0xfa, 0x4d, 0x4d, 0x30, 0xe1, 0xd8, 0x7c},
	{0xcc, 0xbb, 0x23, 0x12, 0x4b, 0x46, 0x94, 0xfc, 0x2a, 0xa4, 0x95, 0xa4, 0x72, 0x18, 0xf2, 0x26},
	{0x5a, 0x27, 0x76, 0xd3, 0xd8, 0xf8, 0x78, 0xaa, 0x5a, 0xf5, 0x2b, 0x0b, 0xf5, 0x44, 0x14, 0x71},
	{0x62, 0xd9, 0x1a, 0x70, 0x0f, 0x26, 0xae, 0x95, 0xec, 0x2e, 0xfa, 0x3b, 0x03, 0xc3, 0x8e, 0xa3},
	{0xae, 0xdc, 0x46, 0x47, 0xdc, 0x24, 0xcb, 0x77, 0x3f, 0xdc, 0xf0, 0x09, 0x06, 0x7c, 0x81, 0x42},
	{0xad, 0xb2, 0x3b, 0x11, 0x98, 0x19, 0x84, 0x95, 0x82, 0x71, 0x80, 0x58, 0x9b, 0x92, 0xe5, 0xe5},
	{0x88, 0xc0, 0x15, 0xa8, 0xac, 0xd6, 0xff, 0xee, 0x82, 0x8e, 0xef, 0xd3, 0x0e, 0x88, 0xc9, 0x3f},
	{0x20, 0x0b, 0x7f, 0x2c, 0x6b, 0xd4, 0x93, 0x90, 0x69, 0x4f, 0x67, 0x66, 0x32, 0x7d, 0x32, 0xf2},
	{0xd0, 0xfe, 0xd1, 0xc3, 0x11, 0xf8, 0x7f, 0xe4, 0x95, 0x34, 0x23, 0xf8, 0xdb, 0x15, 0x46, 0x9e},
	{0x69, 0x52, 0x67, 0xc4, 0xef, 0xfc, 0x91, 0x97, 0x88, 0xf7, 0xd6, 0x05, 0x85, 0x15, 0xd9, 0xe6},
	{0xe3, 0xba, 0x45, 0xdb, 0xfc, 0x81, 0xed, 0xe1, 0x5d, 0x1f, 0xd2, 0xe2, 0xc4, 0x5e, 0x9b, 0xd9},
	{0xb4, 0x08, 0x79, 0x5c, 0x12, 0xec, 0x59, 0x34, 0x11, 0x97, 0x09, 0xf3, 0xad, 0x5c, 0xda, 0x5b},
	{0x78, 0xe7, 0x0a, 0xca, 0x53, 0xbc, 0xea, 0xf0, 0xd6, 0x6c, 0xdd, 0xec, 0x1e, 0x93, 0xdd, 0x31},
	{0x04, 0x6f, 0x7c, 0x16, 0x42, 0xce, 0x4a, 0x48, 0x55, 0x88, 0x7a, 0x60, 0xe3, 0x40, 0x70, 0x9d}
};

const uint8_t additive_ntt_hashes[3][31][16] = {
	// Log rate 0
	{
		{0},
		{0x6c, 0x67, 0x4a, 0x56, 0x27, 0x5d, 0xfd, 0x6b, 0xaf, 0x96, 0x51, 0x63, 0xd6, 0xd4, 0x75, 0x7a},
		{0x37, 0x3b, 0x75, 0x3b, 0x3e, 0x05, 0x3d, 0x12, 0x8c, 0xb5, 0x3a, 0xc2, 0x3f, 0x40, 0x3a, 0x1c},
		{0x09, 0x33, 0xfa, 0x26, 0x68, 0x93, 0x78, 0x68, 0x4a, 0x4f, 0x6a, 0x46, 0x54, 0xde, 0xed, 0x44},
		{0x3f, 0x8d, 0x24, 0x4d, 0xc6, 0x83, 0xe5, 0x85, 0x34, 0xc8, 0xa1, 0xbe, 0xf2, 0x28, 0x41, 0x27},
		{0x2f, 0x72, 0x47, 0x0c, 0xe9, 0x05, 0xc9, 0x26, 0x13, 0x80, 0xba, 0xc9, 0x23, 0x2d, 0xb7, 0xae},
		{0xa2, 0x2e, 0x4b, 0x3a, 0xe7, 0x3b, 0x2a, 0x7c, 0x44, 0x43, 0x28, 0x8e, 0x7f, 0x8f, 0xdf, 0xca},
		{0x81, 0x17, 0x9f, 0x7e, 0x33, 0xb4, 0x52, 0x2b, 0x20, 0xba, 0xcb, 0xa9, 0xc0, 0x7d, 0xb9, 0xcd},
		{0xfb, 0x4c, 0x30, 0x04, 0x90, 0x6e, 0xf7, 0xd5, 0x9d, 0x5c, 0x5a, 0x5a, 0x04, 0x85, 0xe2, 0x90},
		{0xd0, 0x4b, 0xcc, 0xe5, 0xc7, 0xd1, 0xa8, 0x59, 0x95, 0xa9, 0xe9, 0xa6, 0x54, 0xb5, 0x83, 0x23},
		{0x19, 0x1e, 0x2b, 0xc2, 0xee, 0x65, 0x53, 0x00, 0xc2, 0x7f, 0x7c, 0x24, 0x49, 0x52, 0xc0, 0xb7},
		{0xe5, 0x4f, 0x05, 0x5f, 0x6b, 0xbf, 0x6c, 0x63, 0x1d, 0x8b, 0x18, 0x6f, 0x38, 0xce, 0x2d, 0x14},
		{0x61, 0xfc, 0xc4, 0x3e, 0xe5, 0x2b, 0xbd, 0xb6, 0xe2, 0x7a, 0xe5, 0x85, 0x82, 0x81, 0xc9, 0xbe},
		{0xbd, 0x00, 0x57, 0x75, 0x80, 0xa8, 0x55, 0xdb, 0x62, 0x50, 0x9d, 0x1b, 0x0b, 0x46, 0xab, 0x6d},
		{0xd4, 0x73, 0x00, 0x90, 0xc2, 0x57, 0x3b, 0xd3, 0x9e, 0xe2, 0x69, 0x14, 0x1d, 0xc3, 0x6d, 0x44},
		{0x9d, 0xdb, 0x71, 0x32, 0xcc, 0x22, 0x20, 0x81, 0xde, 0xe2, 0x6d, 0xb8, 0xb0, 0x37, 0x6d, 0x0a},
		{0x66, 0xf0, 0x41, 0x10, 0xea, 0x24, 0xae, 0x09, 0xe7, 0x42, 0xbc, 0xd3, 0x61, 0x52, 0xe7, 0x80},
		{0xa3, 0x21, 0x3a, 0xc4, 0x17, 0x29, 0x0e, 0x97, 0x78, 0xd1, 0xc8, 0x5e, 0x8a, 0x27, 0x4f, 0x82},
		{0x4e, 0x8e, 0x21, 0x28, 0x9f, 0x55, 0xcf, 0x52, 0x84, 0x30, 0xf6, 0x8f, 0xc3, 0xc1, 0xa8, 0xe8},
		{0xd3, 0x71, 0x0a, 0x4a, 0x4f, 0xca, 0x93, 0xee, 0xc2, 0xb8, 0x45, 0x94, 0x39, 0x58, 0x92, 0x2e},
		{0xe6, 0xba, 0x17, 0xd4, 0x3f, 0x88, 0x62, 0x51, 0x0e, 0xdd, 0x3f, 0xec, 0x16, 0x48, 0xc7, 0xef},
		{0xe0, 0x41, 0x56, 0xc7, 0xac, 0xa2, 0xd7, 0x51, 0x06, 0xa7, 0x6c, 0xae, 0x88, 0x19, 0xf5, 0x68},
		{0x45, 0xbe, 0xfb, 0x3c, 0x29, 0x3f, 0x30, 0xa0, 0xbb, 0xf4, 0x04, 0x0b, 0x28, 0x69, 0xb0, 0xd8},
		{0xf7, 0xc0, 0xd8, 0x9c, 0xca, 0xe0, 0x01, 0xfd, 0xd6, 0x8d, 0xa6, 0x87, 0x95, 0x4b, 0x00, 0x70},
		{0x3d, 0xdc, 0xc9, 0xb4, 0x28, 0x59, 0xc8, 0xc9, 0xf9, 0xbe, 0x5c, 0x6c, 0xb5, 0xbd, 0x9e, 0xa9},
		{0x2b, 0xdc, 0xa0, 0x1c, 0x18, 0xc8, 0xd6, 0x42, 0x05, 0xeb, 0x7a, 0x0c, 0xa8, 0x5e, 0x64, 0x9d},
		{0xce, 0xc9, 0x31, 0xe2, 0x0b, 0x31, 0x18, 0x4b, 0x27, 0x0a, 0xe0, 0x36, 0x51, 0x18, 0x6c, 0xf8},
		{0xfb, 0x8c, 0x00, 0x5b, 0x98, 0x9e, 0x3e, 0x02, 0xe1, 0xb0, 0xf1, 0xe1, 0x75, 0x91, 0x08, 0x82},
		{0xda, 0x75, 0x62, 0xb4, 0x6e, 0x0b, 0x01, 0x18, 0x4f, 0x8b, 0xaf, 0x2a, 0xea, 0x57, 0x82, 0x6d},
		{0xbe, 0x01, 0xe5, 0x10, 0xe4, 0xcf, 0x06, 0xb7, 0xa2, 0x64, 0x37, 0xe8, 0xc2, 0xb2, 0x8d, 0xc6},
		{0xd4, 0x49, 0xc7, 0x4e, 0x93, 0x0c, 0x90, 0xa7, 0x7d, 0xc6, 0x3a, 0xd2, 0xae, 0xd2, 0xb7, 0xac},
	},
	// Log rate 1
	{0},

	// Log rate 2
	{
		{0},
		{0xe5, 0x87, 0xa7, 0x08, 0xf5, 0x29, 0xf1, 0x47, 0x2b, 0x29, 0x6a, 0x23, 0x5a, 0xe2, 0xf4, 0x0d},
		{0x0f, 0xfb, 0x30, 0xa0, 0xf5, 0x1c, 0x53, 0x21, 0x9f, 0xee, 0x9d, 0x72, 0xf4, 0x03, 0x41, 0x9a},
		{0x14, 0xc0, 0x58, 0x11, 0x43, 0x81, 0xd1, 0xc2, 0x96, 0xc6, 0x9f, 0xb1, 0x17, 0x0f, 0xa7, 0xb3},
		{0x45, 0xf0, 0x19, 0xd1, 0x45, 0xfe, 0x71, 0x8a, 0x9f, 0xcf, 0xca, 0x61, 0xaf, 0xe0, 0x16, 0x29},
		{0x3d, 0xd7, 0xee, 0x36, 0x77, 0x0b, 0x9f, 0xf6, 0x78, 0x79, 0x52, 0x62, 0x03, 0x50, 0xe2, 0x39},
		{0x46, 0xfc, 0x2a, 0x6e, 0xd8, 0x3d, 0x1e, 0xd0, 0xf8, 0xcf, 0xd0, 0x88, 0x4a, 0xc6, 0x48, 0x68},
		{0xe6, 0x66, 0xf0, 0x14, 0xcd, 0x8c, 0x2e, 0x05, 0xce, 0xdf, 0x81, 0xc1, 0x0b, 0x62, 0x3b, 0x7b},
		{0xd8, 0x91, 0x53, 0x8d, 0xf8, 0x31, 0x15, 0xc1, 0x82, 0x48, 0xdd, 0x78, 0x77, 0x45, 0x4b, 0xe2},
		{0x1a, 0x4c, 0xac, 0x20, 0x5d, 0x46, 0xad, 0x13, 0x46, 0xe4, 0x77, 0xd5, 0x79, 0xbd, 0x00, 0xf6},
		{0xfd, 0xb3, 0xc6, 0x8b, 0x3b, 0x14, 0xf6, 0xa8, 0x29, 0xcf, 0x55, 0x9c, 0xde, 0xee, 0x51, 0x44},
		{0x9f, 0x60, 0xb7, 0xae, 0xc4, 0xf4, 0x6c, 0xa3, 0xd1, 0xe1, 0xe0, 0x72, 0x55, 0x11, 0x63, 0xd0},
		{0x82, 0x86, 0x0b, 0x5c, 0x36, 0xf9, 0x7b, 0x11, 0x58, 0x36, 0xf8, 0xc0, 0x61, 0x7f, 0x1e, 0x5a},
		{0x94, 0xec, 0x8f, 0x80, 0xb9, 0x1a, 0x50, 0x5e, 0x7d, 0x40, 0xf9, 0xb6, 0x30, 0x62, 0x93, 0x0b},
		{0x2c, 0x56, 0xa1, 0x12, 0x00, 0xb3, 0xc2, 0x26, 0x1f, 0x1f, 0xfa, 0x4b, 0x86, 0x74, 0x40, 0x18},
		{0xed, 0x08, 0x3f, 0xe4, 0xe5, 0xb7, 0x8d, 0x4d, 0xb3, 0xb4, 0xb5, 0xa3, 0x6b, 0xec, 0x73, 0x43},
		{0x42, 0x43, 0xab, 0x68, 0x05, 0xb1, 0x8b, 0xed, 0x72, 0xf3, 0x98, 0x0a, 0x8f, 0xaa, 0x5c, 0xea},
		{0x17, 0xaa, 0x87, 0xd8, 0xc9, 0x0b, 0x6e, 0xb4, 0xe7, 0xa6, 0xa7, 0x00, 0xd5, 0xfd, 0xc4, 0xe0},
		{0x6f, 0x69, 0x4e, 0xed, 0xa8, 0x79, 0x1b, 0x5f, 0xa3, 0x15, 0xe0, 0x20, 0x50, 0x90, 0xf5, 0x33},
		{0x29, 0x4a, 0x70, 0x28, 0xb5, 0x39, 0x30, 0x5c, 0x27, 0x6a, 0x2a, 0x46, 0x67, 0x7e, 0xff, 0xb2},
		{0x53, 0xe8, 0xa0, 0x86, 0xbe, 0x97, 0xf6, 0x1f, 0x43, 0x93, 0x03, 0x57, 0x44, 0x22, 0x72, 0xcb},
		{0x3b, 0x9a, 0x01, 0x49, 0x41, 0x91, 0xfb, 0x8f, 0x1e, 0x41, 0x10, 0xda, 0x68, 0x7e, 0x39, 0x60},
		{0xbb, 0x8d, 0xda, 0xc3, 0xb2, 0x66, 0xae, 0x36, 0xc5, 0x4c, 0xe3, 0xe5, 0xbf, 0x13, 0x17, 0xbb},
		{0x4a, 0xa2, 0x9b, 0x0f, 0xd7, 0x5f, 0x03, 0xbf, 0x81, 0x69, 0x10, 0x00, 0xd3, 0x49, 0x21, 0x88},
		{0x6e, 0xd3, 0x72, 0x76, 0x9c, 0xb7, 0x2a, 0x37, 0xba, 0xb2, 0xbe, 0x08, 0x66, 0x8b, 0x0e, 0xe3},
		{0x1d, 0x83, 0x93, 0x29, 0x0c, 0x84, 0x8c, 0x75, 0x1f, 0xaa, 0x4c, 0x5e, 0x6a, 0x72, 0x58, 0x8b},
		{0x5d, 0x6b, 0x1b, 0xb6, 0xaa, 0xd1, 0x2f, 0xfd, 0x4b, 0xa4, 0xb1, 0x46, 0x6c, 0xd2, 0xa7, 0x0d},
		{0x5a, 0x22, 0x17, 0x0b, 0x4e, 0xb1, 0xac, 0x6e, 0xf4, 0xb1, 0xd7, 0x03, 0xfa, 0xda, 0xb4, 0xf8},
		{0x06, 0xbb, 0x65, 0xcf, 0x39, 0x5a, 0xbb, 0x3f, 0x8d, 0x38, 0xc8, 0x69, 0xdc, 0xc5, 0xc7, 0x36},
		{0},
		{0},
	}
};

TEST_CASE("NTTBB31 all input lengths", "[ntt]") {
	for (int log_len = 1; log_len <= 27; log_len++) {
		std::mt19937 gen(0xdeadbeef + log_len);
		auto inp_size = 1 << log_len;
		NTTData<BB31> ntt_inp(DataOrder::IN_ORDER, inp_size);
		for (size_t i = 0; i < inp_size; i++) {
			uint32_t r = gen();
			ntt_inp.data[i] = BB31(r);
		}
		NTTConfRad2<BB31> nttconf(BB31(137), 27, log_len);
		NTT<BB31> ntt(nttconf);

		printf("Testing for log input size: %d\n", log_len);

		NTTData<BB31> ntt_out(inp_size);
		ntt.apply(ntt_inp, ntt_out);

		MD5Context md5;
		md5Init(&md5);
		for (size_t i = 0; i < inp_size; i++) {
			uint32_t num = ntt_out.data[i].asUInt32();
			md5Update(&md5, (uint8_t*)&num, 4);
		}
		md5Finalize(&md5);
		REQUIRE(memcmp(md5.digest, bb31_ntt_hashes[log_len], 16) == 0);
	}
}

TEST_CASE("NTTBB31 round trip", "[roundtrip]") {
	constexpr auto log_inp_len = 24;
	constexpr auto inp_size = 1 << log_inp_len;

	NTTData<BB31> ntt_inp(DataOrder::IN_ORDER, inp_size);
	std::mt19937 gen(0xAABBCCDD);

	for (size_t i = 0; i < inp_size; i++) {
		ntt_inp.data[i] = BB31(gen());
	}

	BB31 mul_gen(137);
	NTTConfRad2<BB31> fwdnttconf(mul_gen, 27, log_inp_len);
	NTTConfRad2<BB31> invnttconf(BB31::inv(mul_gen), 27, log_inp_len);
	NTT<BB31> fwdntt(fwdnttconf);
	NTT<BB31> invntt(invnttconf);

	NTTData<BB31> ntt_out(inp_size);
	fwdntt.apply(ntt_inp, ntt_out);
	NTTData<BB31> final_out(inp_size);
	invntt.apply(ntt_out, final_out);

	BB31 inv_log_len = BB31::inv(BB31(inp_size));

	// We expect the first ntt to output be different than input, highly unlikely to be a fixed point
	REQUIRE(memcmp(ntt_inp.data.get(), ntt_out.data.get(), ntt_out.byte_len()) != 0);

	// Multiply by 1/n for the inverse
	for (size_t i = 0; i < (1 << log_inp_len); i++) {
		final_out.data[i] = inv_log_len * final_out.data[i];
	}

	REQUIRE(memcmp(final_out.data.get(), ntt_inp.data.get(), final_out.byte_len()) == 0);
}

TEST_CASE("GPU capability check", "[cap]") { REQUIRE(check_gpu_capabilities()); }

bool run_and_check_additive_ntt(int log_h, int log_rate) {
	std::mt19937 gen(0xdeadbeef + log_h + log_rate);
	auto inp_size = 1 << log_h;
	auto out_size = 1 << (log_h + log_rate);
	NTTData<uint32_t> ntt_inp(DataOrder::IN_ORDER, inp_size);
	for (size_t i = 0; i < inp_size; i++) {
		uint32_t r = gen();
		ntt_inp.data[i] = r;
	}

	AdditiveNTTConf<uint32_t, FanPaarTowerField<5>> nttconf(log_h, log_rate);
	AdditiveNTT<uint32_t, FanPaarTowerField<5>> add_ntt(nttconf);

	NTTData<uint32_t> ntt_out(out_size);
	REQUIRE(add_ntt.apply(ntt_inp, ntt_out));

	std::cout << "Comparing outputs of log_h: " << log_h << " log_rate: " << log_rate << std::endl;
	MD5Context md5;
	md5Init(&md5);
	for (size_t i = 0; i < ntt_out.size; i++) {
		uint32_t d = ntt_out.data[i];
		md5Update(&md5, (uint8_t*)&d, 4);
	}
	md5Finalize(&md5);

	return memcmp(md5.digest, additive_ntt_hashes[log_rate][log_h], 16) == 0;
}

TEST_CASE("Additive NTT r 0", "[ntt][additive][0]") {
	for (int log_h = 1; log_h <= 28; log_h++) {
		REQUIRE(run_and_check_additive_ntt(log_h, 0));
	}
}

TEST_CASE("Additive NTT r 2", "[ntt][additive][2]") {
	for (int log_h = 1; log_h <= 27; log_h++) {
		REQUIRE(run_and_check_additive_ntt(log_h, 2));
	}
}

TEST_CASE("Additive NTT r 0 large inputs", "[ntt][additive][0][slow]") {
	REQUIRE(run_and_check_additive_ntt(29, 0));
	REQUIRE(run_and_check_additive_ntt(30, 0));
}
