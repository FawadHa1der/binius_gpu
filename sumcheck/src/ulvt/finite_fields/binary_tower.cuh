#pragma once

#include <cassert>
#include <cstdint>
#include <cuda/std/utility>

#define BITMASK(d) ((1l << (d)) - 1)
#define HEIGHTTOBIT(d) (1l << (d))

#ifdef __CUDA_ARCH__
#define CONST_MOD __constant__ const
#else
#define CONST_MOD const
#endif

template <size_t HEIGHT>
class FanPaarTowerField;

template <size_t HEIGHT>
class FanPaarTowerFieldBase {
	static_assert(HEIGHT <= 5, "Height cannnot be larger than 5");

public:
	static constexpr __host__ __device__ uint32_t ONE() { return 1; }

	static constexpr __host__ __device__ uint32_t ZERO() { return 0; }

	static constexpr __host__ __device__ uint32_t N_BITS() { return HEIGHTTOBIT(HEIGHT); }

	static constexpr __host__ __device__ bool is_valid(uint32_t a) { return (a >> HEIGHTTOBIT(HEIGHT)) == 0; }

	static constexpr __host__ __device__ uint32_t add(uint32_t a, uint32_t b) { return a ^ b; }

protected:
	static inline __host__ __device__ uint32_t generic_multiply(uint32_t a, uint32_t b) {
		static_assert(HEIGHT > 0, "Height cannot be negative");
		auto aa = to_subfield(a);
		auto bb = to_subfield(b);
		auto a0 = aa.first;
		auto a1 = aa.second;
		auto b0 = bb.first;
		auto b1 = bb.second;

		uint32_t z0 = FanPaarTowerField<HEIGHT - 1>::multiply(a0, b0);
		uint32_t z2 = FanPaarTowerField<HEIGHT - 1>::multiply(a1, b1);
		uint32_t z1 = FanPaarTowerField<HEIGHT - 1>::multiply(a0 ^ a1, b0 ^ b1) ^ z0 ^ z2;
		uint32_t z2a = FanPaarTowerField<HEIGHT - 1>::multiply_alpha(z2);

		return from_subfield(z0 ^ z2, z1 ^ z2a);
	}

	static inline __host__ __device__ uint32_t generic_square(uint32_t a) {
		static_assert(HEIGHT > 0, "Height cannot be negative");
		auto aa = to_subfield(a);
		auto a0 = aa.first;
		auto a1 = aa.second;
		uint32_t z0 = FanPaarTowerField<HEIGHT - 1>::square(a0);
		uint32_t z2 = FanPaarTowerField<HEIGHT - 1>::square(a1);
		uint32_t z2a = FanPaarTowerField<HEIGHT - 1>::multiply_alpha(z2);
		return from_subfield(z0 ^ z2, z2a);
	}

	static inline __host__ __device__ uint32_t generic_inverse(uint32_t a) {
		static_assert(HEIGHT > 0, "Height cannot be negative");
		if (a == 0) {
			assert(a);
			return 0;
		}

		if (FanPaarTowerField<HEIGHT - 1>::is_valid(a)) return FanPaarTowerField<HEIGHT - 1>::inverse(a);
		auto aa = to_subfield(a);
		auto a0 = aa.first;
		auto a1 = aa.second;
		auto inter = a0 ^ FanPaarTowerField<HEIGHT - 1>::multiply_alpha(a1);
		auto delta = FanPaarTowerField<HEIGHT - 1>::multiply(a0, inter) ^ FanPaarTowerField<HEIGHT - 1>::square(a1);
		auto delta_inv = FanPaarTowerField<HEIGHT - 1>::inverse(delta);
		// Check here this is not zero
		auto inv0 = FanPaarTowerField<HEIGHT - 1>::multiply(delta_inv, inter);
		auto inv1 = FanPaarTowerField<HEIGHT - 1>::multiply(delta_inv, a1);
		return from_subfield(inv0, inv1);
	}

	static inline __host__ __device__ uint32_t generic_multiply_alpha(uint32_t a) {
		static_assert(HEIGHT > 0, "Height cannot be negative");
		// uint32_t mask = BITMASK(HEIGHTTOBIT(height));
		// a &= mask;

		auto aa = to_subfield(a);
		auto a0 = aa.first;
		auto a1 = aa.second;
		uint32_t z1 = FanPaarTowerField<HEIGHT - 1>::multiply_alpha(a1);
		return from_subfield(a1, a0 ^ z1);
	}

	static inline __host__ __device__ cuda::std::pair<uint32_t, uint32_t> to_subfield(uint32_t elm) {
		static_assert(HEIGHT > 0, "Height cannot be negative");
		uint32_t mask = BITMASK(HEIGHTTOBIT(HEIGHT - 1));
		return cuda::std::make_pair(elm & mask, (elm >> HEIGHTTOBIT(HEIGHT - 1)) & mask);
	}

	static inline __host__ __device__ uint32_t from_subfield(uint32_t a, uint32_t b) {
		static_assert(HEIGHT > 0, "Height cannot be negative");
		uint32_t res = a | (b << HEIGHTTOBIT(HEIGHT - 1));
		return res;
	}
};

template <size_t HEIGHT>
class FanPaarTowerField : public FanPaarTowerFieldBase<HEIGHT> {
public:
	static_assert(HEIGHT <= 5, "Height cannnot be larger than 5");

	static inline __host__ __device__ uint32_t multiply(uint32_t a, uint32_t b) {
		return FanPaarTowerFieldBase<HEIGHT>::generic_multiply(a, b);
	}

	static inline __host__ __device__ uint32_t square(uint32_t a) {
		return FanPaarTowerFieldBase<HEIGHT>::generic_square(a);
	}

	static inline __host__ __device__ uint32_t inverse(uint32_t a) {
		return FanPaarTowerFieldBase<HEIGHT>::generic_inverse(a);
	}

	static inline __host__ __device__ uint32_t multiply_alpha(uint32_t a) {
		return FanPaarTowerFieldBase<HEIGHT>::generic_multiply_alpha(a);
	}
};

template <>
class FanPaarTowerField<2> : public FanPaarTowerFieldBase<2> {
public:
	static inline __host__ __device__ uint32_t multiply(uint32_t a, uint32_t b) {
		static CONST_MOD uint8_t mul_table_h2[256] = {
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3,
			0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x2, 0x3, 0x1, 0x8, 0xa, 0xb, 0x9,
			0xc, 0xe, 0xf, 0xd, 0x4, 0x6, 0x7, 0x5, 0x0, 0x3, 0x1, 0x2, 0xc, 0xf, 0xd, 0xe, 0x4, 0x7, 0x5, 0x6,
			0x8, 0xb, 0x9, 0xa, 0x0, 0x4, 0x8, 0xc, 0x9, 0xd, 0x1, 0x5, 0xe, 0xa, 0x6, 0x2, 0x7, 0x3, 0xf, 0xb,
			0x0, 0x5, 0xa, 0xf, 0xd, 0x8, 0x7, 0x2, 0x6, 0x3, 0xc, 0x9, 0xb, 0xe, 0x1, 0x4, 0x0, 0x6, 0xb, 0xd,
			0x1, 0x7, 0xa, 0xc, 0x2, 0x4, 0x9, 0xf, 0x3, 0x5, 0x8, 0xe, 0x0, 0x7, 0x9, 0xe, 0x5, 0x2, 0xc, 0xb,
			0xa, 0xd, 0x3, 0x4, 0xf, 0x8, 0x6, 0x1, 0x0, 0x8, 0xc, 0x4, 0xe, 0x6, 0x2, 0xa, 0x7, 0xf, 0xb, 0x3,
			0x9, 0x1, 0x5, 0xd, 0x0, 0x9, 0xe, 0x7, 0xa, 0x3, 0x4, 0xd, 0xf, 0x6, 0x1, 0x8, 0x5, 0xc, 0xb, 0x2,
			0x0, 0xa, 0xf, 0x5, 0x6, 0xc, 0x9, 0x3, 0xb, 0x1, 0x4, 0xe, 0xd, 0x7, 0x2, 0x8, 0x0, 0xb, 0xd, 0x6,
			0x2, 0x9, 0xf, 0x4, 0x3, 0x8, 0xe, 0x5, 0x1, 0xa, 0xc, 0x7, 0x0, 0xc, 0x4, 0x8, 0x7, 0xb, 0x3, 0xf,
			0x9, 0x5, 0xd, 0x1, 0xe, 0x2, 0xa, 0x6, 0x0, 0xd, 0x6, 0xb, 0x3, 0xe, 0x5, 0x8, 0x1, 0xc, 0x7, 0xa,
			0x2, 0xf, 0x4, 0x9, 0x0, 0xe, 0x7, 0x9, 0xf, 0x1, 0x8, 0x6, 0x5, 0xb, 0x2, 0xc, 0xa, 0x4, 0xd, 0x3,
			0x0, 0xf, 0x5, 0xa, 0xb, 0x4, 0xe, 0x1, 0xd, 0x2, 0x8, 0x7, 0x6, 0x9, 0x3, 0xc
		};
		uint32_t lookup = (a & 0xf) | ((b & 0xf) << 4);
		return mul_table_h2[lookup];
	}

	static inline __host__ __device__ uint32_t square(uint32_t a) {
		static CONST_MOD uint8_t sqr_table_h2[16] = {
			0x00, 0x01, 0x03, 0x02, 0x09, 0x08, 0x0a, 0x0b, 0x07, 0x06, 0x04, 0x05, 0x0e, 0x0f, 0x0d, 0x0c
		};
		return sqr_table_h2[a & 0xf];
	}

	static inline __host__ __device__ uint32_t inverse(uint32_t a) {
		static CONST_MOD uint8_t inv_table_h2[16] = {
			0x00, 0x01, 0x03, 0x02, 0x06, 0x0e, 0x04, 0x0f, 0x0d, 0x0a, 0x09, 0x0c, 0x0b, 0x08, 0x05, 0x07
		};

		return inv_table_h2[a & 0xf];
	}

	static inline __host__ __device__ uint32_t multiply_alpha(uint32_t a) {
		static CONST_MOD uint8_t mul_alpha_table_h2[16] = {
			0x00, 0x04, 0x08, 0x0c, 0x09, 0x0d, 0x01, 0x05, 0x0e, 0x0a, 0x06, 0x02, 0x07, 0x03, 0x0f, 0x0b
		};

		return mul_alpha_table_h2[a & 0xf];
	}
};

template <>
class FanPaarTowerField<3> : public FanPaarTowerFieldBase<3> {
public:
	static inline __host__ __device__ uint32_t multiply(uint32_t a, uint32_t b) {
		return FanPaarTowerFieldBase<3>::generic_multiply(a, b);
	}

	static inline __host__ __device__ uint32_t square(uint32_t a) {
		static CONST_MOD uint8_t sqr_table_h3[256] = {
			0x00, 0x01, 0x03, 0x02, 0x09, 0x08, 0x0a, 0x0b, 0x07, 0x06, 0x04, 0x05, 0x0e, 0x0f, 0x0d, 0x0c, 0x41, 0x40,
			0x42, 0x43, 0x48, 0x49, 0x4b, 0x4a, 0x46, 0x47, 0x45, 0x44, 0x4f, 0x4e, 0x4c, 0x4d, 0xc3, 0xc2, 0xc0, 0xc1,
			0xca, 0xcb, 0xc9, 0xc8, 0xc4, 0xc5, 0xc7, 0xc6, 0xcd, 0xcc, 0xce, 0xcf, 0x82, 0x83, 0x81, 0x80, 0x8b, 0x8a,
			0x88, 0x89, 0x85, 0x84, 0x86, 0x87, 0x8c, 0x8d, 0x8f, 0x8e, 0xa9, 0xa8, 0xaa, 0xab, 0xa0, 0xa1, 0xa3, 0xa2,
			0xae, 0xaf, 0xad, 0xac, 0xa7, 0xa6, 0xa4, 0xa5, 0xe8, 0xe9, 0xeb, 0xea, 0xe1, 0xe0, 0xe2, 0xe3, 0xef, 0xee,
			0xec, 0xed, 0xe6, 0xe7, 0xe5, 0xe4, 0x6a, 0x6b, 0x69, 0x68, 0x63, 0x62, 0x60, 0x61, 0x6d, 0x6c, 0x6e, 0x6f,
			0x64, 0x65, 0x67, 0x66, 0x2b, 0x2a, 0x28, 0x29, 0x22, 0x23, 0x21, 0x20, 0x2c, 0x2d, 0x2f, 0x2e, 0x25, 0x24,
			0x26, 0x27, 0x57, 0x56, 0x54, 0x55, 0x5e, 0x5f, 0x5d, 0x5c, 0x50, 0x51, 0x53, 0x52, 0x59, 0x58, 0x5a, 0x5b,
			0x16, 0x17, 0x15, 0x14, 0x1f, 0x1e, 0x1c, 0x1d, 0x11, 0x10, 0x12, 0x13, 0x18, 0x19, 0x1b, 0x1a, 0x94, 0x95,
			0x97, 0x96, 0x9d, 0x9c, 0x9e, 0x9f, 0x93, 0x92, 0x90, 0x91, 0x9a, 0x9b, 0x99, 0x98, 0xd5, 0xd4, 0xd6, 0xd7,
			0xdc, 0xdd, 0xdf, 0xde, 0xd2, 0xd3, 0xd1, 0xd0, 0xdb, 0xda, 0xd8, 0xd9, 0xfe, 0xff, 0xfd, 0xfc, 0xf7, 0xf6,
			0xf4, 0xf5, 0xf9, 0xf8, 0xfa, 0xfb, 0xf0, 0xf1, 0xf3, 0xf2, 0xbf, 0xbe, 0xbc, 0xbd, 0xb6, 0xb7, 0xb5, 0xb4,
			0xb8, 0xb9, 0xbb, 0xba, 0xb1, 0xb0, 0xb2, 0xb3, 0x3d, 0x3c, 0x3e, 0x3f, 0x34, 0x35, 0x37, 0x36, 0x3a, 0x3b,
			0x39, 0x38, 0x33, 0x32, 0x30, 0x31, 0x7c, 0x7d, 0x7f, 0x7e, 0x75, 0x74, 0x76, 0x77, 0x7b, 0x7a, 0x78, 0x79,
			0x72, 0x73, 0x71, 0x70
		};
		a &= 0xff;
		return sqr_table_h3[a];
	}

	static inline __host__ __device__ uint32_t inverse(uint32_t a) {
		static CONST_MOD uint8_t inv_table_h3[256] = {
			0x00, 0x01, 0x03, 0x02, 0x06, 0x0e, 0x04, 0x0f, 0x0d, 0x0a, 0x09, 0x0c, 0x0b, 0x08, 0x05, 0x07, 0x14, 0x67,
			0x94, 0x7b, 0x10, 0x66, 0x9e, 0x7e, 0xd2, 0x81, 0x27, 0x4b, 0xd1, 0x8f, 0x2f, 0x42, 0x3c, 0xe6, 0xde, 0x7c,
			0xb3, 0xc1, 0x4a, 0x1a, 0x30, 0xe9, 0xdd, 0x79, 0xb1, 0xc6, 0x43, 0x1e, 0x28, 0xe8, 0x9d, 0xb9, 0x63, 0x39,
			0x8d, 0xc2, 0x62, 0x35, 0x83, 0xc5, 0x20, 0xe7, 0x97, 0xbb, 0x61, 0x48, 0x1f, 0x2e, 0xac, 0xc8, 0xbc, 0x56,
			0x41, 0x60, 0x26, 0x1b, 0xcf, 0xaa, 0x5b, 0xbe, 0xef, 0x73, 0x6d, 0x5e, 0xf7, 0x86, 0x47, 0xbd, 0x88, 0xfc,
			0xbf, 0x4e, 0x76, 0xe0, 0x53, 0x6c, 0x49, 0x40, 0x38, 0x34, 0xe4, 0xeb, 0x15, 0x11, 0x8b, 0x85, 0xaf, 0xa9,
			0x5f, 0x52, 0x98, 0x92, 0xfb, 0xb5, 0xee, 0x51, 0xb7, 0xf0, 0x5c, 0xe1, 0xdc, 0x2b, 0x95, 0x13, 0x23, 0xdf,
			0x17, 0x9f, 0xd3, 0x19, 0xc4, 0x3a, 0x8a, 0x69, 0x55, 0xf6, 0x58, 0xfd, 0x84, 0x68, 0xc3, 0x36, 0xd0, 0x1d,
			0xa6, 0xf3, 0x6f, 0x99, 0x12, 0x7a, 0xba, 0x3e, 0x6e, 0x93, 0xa0, 0xf8, 0xb8, 0x32, 0x16, 0x7f, 0x9a, 0xf9,
			0xe2, 0xdb, 0xed, 0xd8, 0x90, 0xf2, 0xae, 0x6b, 0x4d, 0xce, 0x44, 0xc9, 0xa8, 0x6a, 0xc7, 0x2c, 0xc0, 0x24,
			0xfa, 0x71, 0xf1, 0x74, 0x9c, 0x33, 0x96, 0x3f, 0x46, 0x57, 0x4f, 0x5a, 0xb2, 0x25, 0x37, 0x8c, 0x82, 0x3b,
			0x2d, 0xb0, 0x45, 0xad, 0xd7, 0xff, 0xf4, 0xd4, 0xab, 0x4c, 0x8e, 0x1c, 0x18, 0x80, 0xcd, 0xf5, 0xfe, 0xca,
			0xa5, 0xec, 0xe3, 0xa3, 0x78, 0x2a, 0x22, 0x7d, 0x5d, 0x77, 0xa2, 0xda, 0x64, 0xea, 0x21, 0x3d, 0x31, 0x29,
			0xe5, 0x65, 0xd9, 0xa4, 0x72, 0x50, 0x75, 0xb6, 0xa7, 0x91, 0xcc, 0xd5, 0x87, 0x54, 0x9b, 0xa1, 0xb4, 0x70,
			0x59, 0x89, 0xd6, 0xcb
		};
		a &= 0xff;
		assert(a);
		return inv_table_h3[a];
	}

	static inline __host__ __device__ uint32_t multiply_alpha(uint32_t a) {
		static CONST_MOD uint8_t alpha_table_h3[256] = {
			0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0, 0x41, 0x51,
			0x61, 0x71, 0x01, 0x11, 0x21, 0x31, 0xc1, 0xd1, 0xe1, 0xf1, 0x81, 0x91, 0xa1, 0xb1, 0x82, 0x92, 0xa2, 0xb2,
			0xc2, 0xd2, 0xe2, 0xf2, 0x02, 0x12, 0x22, 0x32, 0x42, 0x52, 0x62, 0x72, 0xc3, 0xd3, 0xe3, 0xf3, 0x83, 0x93,
			0xa3, 0xb3, 0x43, 0x53, 0x63, 0x73, 0x03, 0x13, 0x23, 0x33, 0x94, 0x84, 0xb4, 0xa4, 0xd4, 0xc4, 0xf4, 0xe4,
			0x14, 0x04, 0x34, 0x24, 0x54, 0x44, 0x74, 0x64, 0xd5, 0xc5, 0xf5, 0xe5, 0x95, 0x85, 0xb5, 0xa5, 0x55, 0x45,
			0x75, 0x65, 0x15, 0x05, 0x35, 0x25, 0x16, 0x06, 0x36, 0x26, 0x56, 0x46, 0x76, 0x66, 0x96, 0x86, 0xb6, 0xa6,
			0xd6, 0xc6, 0xf6, 0xe6, 0x57, 0x47, 0x77, 0x67, 0x17, 0x07, 0x37, 0x27, 0xd7, 0xc7, 0xf7, 0xe7, 0x97, 0x87,
			0xb7, 0xa7, 0xe8, 0xf8, 0xc8, 0xd8, 0xa8, 0xb8, 0x88, 0x98, 0x68, 0x78, 0x48, 0x58, 0x28, 0x38, 0x08, 0x18,
			0xa9, 0xb9, 0x89, 0x99, 0xe9, 0xf9, 0xc9, 0xd9, 0x29, 0x39, 0x09, 0x19, 0x69, 0x79, 0x49, 0x59, 0x6a, 0x7a,
			0x4a, 0x5a, 0x2a, 0x3a, 0x0a, 0x1a, 0xea, 0xfa, 0xca, 0xda, 0xaa, 0xba, 0x8a, 0x9a, 0x2b, 0x3b, 0x0b, 0x1b,
			0x6b, 0x7b, 0x4b, 0x5b, 0xab, 0xbb, 0x8b, 0x9b, 0xeb, 0xfb, 0xcb, 0xdb, 0x7c, 0x6c, 0x5c, 0x4c, 0x3c, 0x2c,
			0x1c, 0x0c, 0xfc, 0xec, 0xdc, 0xcc, 0xbc, 0xac, 0x9c, 0x8c, 0x3d, 0x2d, 0x1d, 0x0d, 0x7d, 0x6d, 0x5d, 0x4d,
			0xbd, 0xad, 0x9d, 0x8d, 0xfd, 0xed, 0xdd, 0xcd, 0xfe, 0xee, 0xde, 0xce, 0xbe, 0xae, 0x9e, 0x8e, 0x7e, 0x6e,
			0x5e, 0x4e, 0x3e, 0x2e, 0x1e, 0x0e, 0xbf, 0xaf, 0x9f, 0x8f, 0xff, 0xef, 0xdf, 0xcf, 0x3f, 0x2f, 0x1f, 0x0f,
			0x7f, 0x6f, 0x5f, 0x4f
		};
		a &= 0xff;
		return alpha_table_h3[a];
	}
};

template <>
class FanPaarTowerField<0> : FanPaarTowerFieldBase<0> {
public:
	static inline __host__ __device__ uint32_t multiply(uint32_t a, uint32_t b) { return a & b & 1; }

	static inline __host__ __device__ uint32_t square(uint32_t a) { return a & 1; }

	static inline __host__ __device__ uint32_t inverse(uint32_t a) { return a & 1; }

	static inline __host__ __device__ uint32_t multiply_alpha(uint32_t a) { return a & 1; }
};

#undef BITMASK
#undef HEIGHTTOBIT
